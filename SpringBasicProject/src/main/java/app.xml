<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!--
	
	클래스 (관리할 클래스 등록) 
	클래스 등록<bean>, 패키지 단위 <context:component-scan>
	id는 찾아봐야하는 파일의 네임!
	
	스프링에 등록해서 사용하는 클래스
	 	1. DAO , MANAGER, MODEL...
	 	2. VO(DTO) => 일반 데이터형=> 등록하지 않는다.
	 	  ========> LIKE INT, DOUBLE(변수형으로 본다.)	
		
		SPRING 이 중간 매개역할을 한다. => 결함성을 낮춘다!
        
        scope="prototype" => 객체를 생성할때마다 주소값을 다르게 하겠다.! 싱글톤x
   
   		DI (의존성 주입) =>시작하자 마자 내가 입력해 놓은 값을 가져옴 => 아래 3가지 가능!/ 변수명에 값을 채우는 것!
			=======
			setmethod에 값을 채우지 않고 xml에 처음에 setting을 해놓고 시작한다.
			<값채우는 3가지 방법>
			1.property DI(setter injection)(시작하자 마자 맴버변수에 값을 채워준다.) =>여기에 값을 채워줘!
			2.constructor DI(생성자를 통해 매개변수에 값을 채울수있다.)
			3.method DI(시작하자마자 메소드 호출) 1)시작하자 마자(init-method:드라이버 등록할때 자동 드라이버등록하고 시작할때 사용, 네트워크 등록 등등에 사용,자동처리 => 자동 로그인 !), 2)끝났을때 시작
   				==> 맨끝이라면=> disconnection에 사용!
   		
   		DL: 등록된 클래스를 찾아오는 것..
   		
   		스프링의 역할: 1. 클래스 찾기/관리(매번 객체 생성X)-> 메모리 활용에 GOOD! => id를 주어 id를 사용!
   				  2. 매개변수에 값넣기(set메소드.. 아래 3가지)


		DL + DI => DI(IOC)
		
		스프링4.0이 대부분.. 따라서 아래처럼 XML코딩을 알아야한다.
		현재 배우는 내용은 5.0=> 자바코딩!
		
		
   		
-->

<!-- 값을 채우는 3가지 방법!! -->
	<bean id="sa" class="com.sist.spring.Sawon" scope="singleton" init-method="display">
		<property name="sawon" value="1"></property>
		<property name="name" value="홍길동"></property>
		<property name="dept" value="개발부"></property>
	</bean>
	
	<!-- set사번에 1번을 넣어.. -->
	<bean id="sa1" class="com.sist.spring.Sawon" scope="singleton">
		<property name="sawon"><value>1</value></property>
		<property name="name"><value>심청이</value></property>
		<property name="dept"><value>개발부</value></property>
	</bean>
	
	<!-- 가장 많이 사용!! xmlns:p 체크해야한다 -->
	<bean id="sa2" class="com.sist.spring.Sawon"
	p:sawon="3"
	p:name="춘향이"
	p:dept="기획부"
	/>
	
	
	
	<!--생성자 2가지
		Sawon sa3=new Sawon();
		3개의 값을 모두 채워야 호출이 가능하다!
		public Sawon(int sawon, String name, String dept) {
		
		index는 주지 않아도 순서대로 정의하면 맨처음에 있는 것부터 대입한다..
		<constructor-arg value="1" index="0"/> ==> 매개변수가 있을때 <constructor-arg> 사용!
		사용하는 이유new하지 않기때문에 이렇게 넣어서 메모리를 할당해줘..
	
		클래스마다 값을 채우지 않고 시작하는 경우, 값을 채우고 시작해야하는 경우에 따라 생성자에 매개변수(ex driver)를 넣어놓는다.	
		
		
	-->
	<!-- 매개변수있는 생성자 1방법 -->
	<bean id="sa3" class="com.sist.spring.Sawon">
		<constructor-arg value="1" index="0"/>
		<constructor-arg value="박문수" index="1"/>
		<constructor-arg value="자재부" index="2"/>
	</bean>
	
	<!-- 매개변수있는 생성자 2방법- 선호도 가장 높음! -->
	<!-- 매개 변수 없는 것 호출 =>E따라서 setmethod이용해서 값을 채워야함.. but sa3의 매개변수 가 있는 생성자에 값을 채울예정 c: 사용하여!!!-->
	<bean id="sa4" class="com.sist.spring.Sawon"
		c:sawon="2"
		c:name="이순신"
		c:dept="총무부"
	/>
	

	<!-- 매개변수있는 생성자 3방법=> 이러한 것들은 메모리할당할때 값을 채워라. 값을 채워서 메모리할당을 하던지, 그냥 메모리 할당을 하던지.. -->
	<!-- meta-date meta-file? -->
	<bean id="sa5" class="com.sist.spring.Sawon"
		c:_0="3"
		c:_1="강감찬"
		c:_2="교육부"
	/>
	</beans>