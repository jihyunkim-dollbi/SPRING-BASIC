<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	
	<!--
	 
		클래스 관리하는 곳. =>컨테이너 =>  making class mennual by xml
		컨테이너1. 메모리할당 2.메모리회수 3.di 4.dl 
		아래는 5개의 컨테이너 종류!
		
		1.BEANFACTORY
		2.APPLICATIONCONTEXT
		3.WEBAPPLICATIONCONTEXT
		4.ANNOTATIONCONTIFAPPLICATIONCONTEXT
		5.GENERICXMLAPPLICATIONCONTEXT
	
		DI, AOP, JDBC, ORM => 컨테이너에서 관리! => SPRING에는 이 모든 기능을 수행할수있는 컨테니어가 있다.
	
		<상속도>
		1.BEANFACTORY :역할 CORE(DI(필요한데이터 설정setter), DL(데이터찾기가능)) 
		 		|
		2.APPLICATIONCONTEXT :has DI DL(기능상속), AOP(따라서 BEANFACTORY사용X)(MVC사용X)
		 		|
		=============================================================================================
				| 									|									 |
		3.WEBAPPLICATIONCONTEXT    4.ANNOTATIONCONTIFAPPLICATIONCONTEXT		5.GENERICXMLAPPLICATIONCONTEXT
		DI, DL, AOP, MVC(MVC사용시)	DI, DL, AOP,자바만 사용가능(XMLCODING NO)    DI, DL, AOP,자바 & XMLCODING OK     
		
		<property name=""></property> => 맴버변수 => setter하기!
		생성자를 먼저 만들지 않았기때문에 가장먼저 드라이버를 등록( init() )하라고 명령을 해야함!
		
		applicationcontext => XML 읽기!
		
		1.XML 파싱먼저! app.xml(따라서 dtd를 모두 올려놓고 시작 => tag를 읽게 해야하기때문에..)
		2.class 읽기/메모리할당
		3.setter에 값을 채운다
		4.필요한 메소드 호출 가능 => init-method(생성-드라이버등록시..etc), destroy-method(소멸-disconnection ..etc)
		==========================>기본세팅
		5.프로그래머가 필요한 메소드를 호출
		==========================
		6.메모리해제
		
		init-method="init" => 드라이버 등록 자동호출하기!!
		
	 -->
	<bean id="dao" class="com.sist.spring.EmpDAO" init-method="init" >
		<property name="driverName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
		<property name="userName" value="hr"/>
		<property name="password" value="happy"/>
	</bean>
	<!-- 
		EmpDAO dao=new EmpDAO();
		dao.setdriverName("~~~") => 스프링이 값을 넣어줌! => DI
		ApplicationContext에 등록!
		
		map! id를 주면 값을 넘겨줌!
		=======================
		dao키 ,  new EmpDAO()주소값
		======================
		mc키  , new MainClass() 값
		=======================
		
		about => ref 
		 p:dao-ref="" => 해당 id가 갖고 있는 주소값 넘길때 =>main의 dao에 값을 넘김!=> public void setDao(EmpDAO dao)=> 여기 dao에 값을 넣어줌!
		 p:dao="" =>일반변수 값으로 넘어감!=> 일반 문자열을 넘김
		 
		 스프링은 메모리 할당시 => 지역변수는 상관하지 않고 => 멤버변수만 트래킹한다. => 따라서 메모리할당하고 싶은 클래스는 멤버변수에 올려놓고 setter/getter가능!
	 -->
	 <bean id="mc" class="com.sist.spring.MainClass"
	 p:dao-ref="dao"
	 />
	 
	 <bean id="mc2" class="com.sist.spring.MainClass2"
	 p:dao-ref="dao"
	 />
	<!-- dao를 사용할때 사용처(mainclass1,2,3....) 등록만하면(참조!) 사용가능! -->
	
	
</beans>
